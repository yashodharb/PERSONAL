;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

;;; -*- lexical-binding: t -*-

;; Package Manager Configuration
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Ensure `use-package` is installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Theme Settings
(use-package gruber-darker-theme
  :ensure t
  :config
  (load-theme 'gruber-darker t)) ;; Load Gruber-Darker theme

;; Essential Packages
(use-package company
  :ensure t
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)) ;; Enable autocompletion immediately

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)) ;; Enable syntax checking globally

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'") ;; JavaScript mode for .js files

(use-package prettier-js
  :ensure t
  :hook (js2-mode . prettier-js-mode)) ;; Enable Prettier for JavaScript formatting

(use-package clang-format
  :ensure t) ;; Clang-format integration for C/C++ formatting

(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode) ;; Enable in programming modes
  :config
  (setq highlight-indent-guides-method 'character   ;; Use dots for indentation guides
        highlight-indent-guides-responsive 'top     ;; Highlight active indentation region
        highlight-indent-guides-delay 0.1))         ;; Delay rendering guides slightly for performance

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 0.5)) ;; Show keybinding hints after 0.5 seconds

(use-package dired-sidebar
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (setq dired-sidebar-theme 'nerd
        dired-sidebar-use-term-integration t
        dired-sidebar-use-custom-font t)) ;; Enable a sidebar for file management

(use-package ibuffer
  :ensure t
  :bind ("C-x C-b" . ibuffer)) ;; Replace default buffer list with ibuffer

(use-package super-save
  :ensure t
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)) ;; Automatically save buffers on focus change

;; Hook for Clang-Format
(add-hook 'before-save-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode)
              (clang-format-buffer))))

;; Compile Command for C/C++
(setq compile-command
      (lambda ()
        (concat "gcc -Wall -o "
                (file-name-sans-extension (buffer-file-name))
                " " (buffer-file-name))))

;; Disable Smooth Scrolling Animations
(setq scroll-conservatively 101) ;; Prevent recentering while scrolling
(setq scroll-step 1) ;; Scroll by one line at a time
(setq auto-window-vscroll nil) ;; Disable automatic vertical scroll adjustments
(setq pixel-scroll-mode nil) ;; Ensure pixel scrolling is off
(setq fast-but-imprecise-scrolling t) ;; Optimize for immediate feedback while scrolling

;; UI Customizations
(menu-bar-mode -1) ;; Remove menu bar
(tool-bar-mode -1) ;; Remove tool bar
(scroll-bar-mode -1) ;; Remove scroll bar
(setq inhibit-startup-screen t) ;; Disable startup screen
(setq-default indent-tabs-mode t
              tab-width 4) ;; Use tabs for indentation
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t) ;; Enable relative line numbers

;; Disable Arrow Keys with Guidance
(global-set-key (kbd "<up>")
                (lambda () (interactive) (message "Use C-p instead of the up arrow key!")))
(global-set-key (kbd "<down>")
                (lambda () (interactive) (message "Use C-n instead of the down arrow key!")))
(global-set-key (kbd "<left>")
                (lambda () (interactive) (message "Use C-b instead of the left arrow key!")))
(global-set-key (kbd "<right>")
                (lambda () (interactive) (message "Use C-f instead of the right arrow key!")))

;; Fullscreen on Startup
(add-to-list 'default-frame-alist '(fullscreen . fullboth)) ;; Launch Emacs in fullscreen mode

;; Enhanced and Smaller Mode Line
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                "Buffer: %b (%n) | " ;; Display buffer name and buffer number
                "Position: %l:%c | " ;; Display line and column
                "Size: %I | " ;; Display buffer size
                "Mode: %m | " ;; Display major mode
                "Time: " (:eval (format-time-string "%H:%M")) " | " ;; Display current time
                "Progress: %p%% | " ;; Display percentage through the file
                "Encoding: " (:eval (symbol-name buffer-file-coding-system)) ;; Display encoding info
                " | "
                mode-line-modes)) ;; Show major/minor modes

;; Set Smaller Font Size for Mode Line
(set-face-attribute 'mode-line nil :height 130) ;; Reduce mode line font size
(set-face-attribute 'mode-line-inactive nil :height 130) ;; Reduce inactive mode line font size

;; Set DejaVu Sans Mono Font
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono" ;; Set font to DejaVu Sans Mono, a widely available font
                    :height 200)              ;; Set font size to 200%

;; Kill All Buffers Function
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  (switch-to-buffer "*scratch*"))
