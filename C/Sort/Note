Function Purpose:

void swap(int *xp, int *yp)

This function swaps the values pointed to by xp and yp.

That means: if you pass it two int variables by address, it will exchange their values in-place.
Line-by-line Breakdown:

int temp = *xp;

    *xp gets the value at the address xp.

    That value is stored in a temporary variable temp.

*xp = *yp;

    Replaces the value at xp with the value at yp.

*yp = temp;

    Now, yp gets the original value of xp (saved in temp).

Visual Example:

Let’s say in main():

int a = 10, b = 20;
swap(&a, &b);

Before swap:

a = 10
b = 20

Inside swap(&a, &b):

temp = *xp = 10
*xp = *yp = 20   → a becomes 20
*yp = temp = 10  → b becomes 10

After swap:

a = 20
b = 10

Key Concept:

This only works because you're passing pointers, i.e., the memory addresses of a and b. If you had passed just a and b directly (by value), it would not modify the original variables.