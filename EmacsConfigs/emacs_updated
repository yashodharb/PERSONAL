;;; -*- lexical-binding: t -*-

;; Package Manager Configuration
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Ensure `use-package` is installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Theme Settings - Gruber-Darker Theme
(use-package gruber-darker-theme
  :ensure t
  :config
  (load-theme 'gruber-darker t)) ;; Load Gruber-Darker theme

;; Scrolling Configuration
(setq mouse-wheel-progressive-speed nil) ;; Disable accelerated scrolling
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; Smooth scrolling, one line per wheel tick
(setq scroll-conservatively 101) ;; Prevent recentering while scrolling
(setq scroll-step 1) ;; Scroll by one line at a time
(setq auto-window-vscroll nil) ;; Disable automatic vertical scroll adjustments
(setq pixel-scroll-mode nil) ;; Ensure pixel scrolling is off
(setq fast-but-imprecise-scrolling t) ;; Optimize for immediate feedback while scrolling

;; Essential Packages
(use-package company
  :ensure t
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0) ;; Enable autocompletion immediately
  (setq company-backends '(company-capf company-dabbrev company-files))) ;; Exclude company-clang

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)) ;; Enable syntax checking globally

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'") ;; JavaScript mode for .js files

(use-package prettier-js
  :ensure t
  :hook (js2-mode . prettier-js-mode)) ;; Enable Prettier for JavaScript formatting

(use-package clang-format
  :ensure t) ;; Clang-format integration for C/C++ formatting

;; Visual Indentation Guides
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode) ;; Enable in programming modes
  :config
  (setq highlight-indent-guides-method 'character   ;; Use characters for indentation
        highlight-indent-guides-character ?◦       ;; Set fancy "o"-like dot as the visual guide character
        highlight-indent-guides-auto-enabled nil    ;; Avoid automatic calculations
        highlight-indent-guides-responsive 'top     ;; Highlight active indentation region
        highlight-indent-guides-delay 0.1))         ;; Slight delay for performance

;; Ibuffer Customization
(use-package ibuffer
  :ensure t
  :bind ("C-x C-b" . ibuffer)) ;; Replace default buffer list with ibuffer

;; UI Customizations
(menu-bar-mode -1) ;; Remove menu bar
(tool-bar-mode -1) ;; Remove tool bar
(scroll-bar-mode -1) ;; Remove scroll bar
(setq inhibit-startup-screen t) ;; Disable startup screen
(setq-default indent-tabs-mode t
              tab-width 4) ;; Use tabs for indentation
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t) ;; Enable relative line numbers

;; Disable Arrow Keys with Guidance
(global-set-key (kbd "<up>")
                (lambda () (interactive) (message "Use C-p instead of the up arrow key!")))
(global-set-key (kbd "<down>")
                (lambda () (interactive) (message "Use C-n instead of the down arrow key!")))
(global-set-key (kbd "<left>")
                (lambda () (interactive) (message "Use C-b instead of the left arrow key!")))
(global-set-key (kbd "<right>")
                (lambda () (interactive) (message "Use C-f instead of the right arrow key!")))

;; Fullscreen on Startup
(add-to-list 'default-frame-alist '(fullscreen . fullboth)) ;; Launch Emacs in fullscreen mode

;; Enhanced and Smaller Mode Line
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                "%b"                        ;; Buffer name
                " · %l:%c"                   ;; Line and column
                " · %I"                      ;; Buffer size
                " · %m"                      ;; Major mode
                (:eval (unless (string= (symbol-name buffer-file-coding-system) "utf-8-unix")
                         (concat " · " (symbol-name buffer-file-coding-system)))) ;; Show encoding if not UTF-8
                mode-line-modes))            ;; Minor modes

;; Set Smaller Font Size for Mode Line
(set-face-attribute 'mode-line nil :height 130) ;; Reduce mode line font size
(set-face-attribute 'mode-line-inactive nil :height 130) ;; Reduce inactive mode line font size

;; Set DejaVu Sans Mono Font
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono" ;; Set font to DejaVu Sans Mono, a widely available font
                    :height 200)              ;; Set font size to 200%

;; Kill All Buffers Function
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  (switch-to-buffer "*scratch*"))

;; Custom Variables and Faces
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(gruber-darker))
 '(custom-safe-themes
   '("da75eceab6bea9298e04ce5b4b07349f8c02da305734f7c0c8c6af7b5eaa9738" "01a9797244146bbae39b18ef37e6f2ca5bebded90d9fe3a2f342a9e863aaa4fd" "11819dd7a24f40a766c0b632d11f60aaf520cf96bd6d8f35bae3399880937970" default))
 '(package-selected-packages
   '(org-bullets prettier-js js2-mode highlight-indent-guides gruber-darker-theme flycheck dracula-theme company clang-format)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cursor ((t (:background "dark gray"))))
 '(dired-directory ((t (:foreground "gold" :weight bold))))
 '(font-lock-comment-delimiter-face ((t (:foreground "powder blue"))))
 '(font-lock-comment-face ((t (:foreground "sky blue"))))
 '(font-lock-function-name-face ((t (:foreground "powder blue" :weight bold))))
 '(highlight ((t (:background "aquamarine" :foreground "#2e3436"))))
 '(line-number ((t (:inherit default :foreground "yellow"))))
 '(line-number-current-line ((t (:inherit line-number :foreground "gold"))))
 '(minibuffer-prompt ((t (:foreground "powder blue"))))
 '(mode-line ((t (:background "dim gray" :foreground "black" :box (:line-width (3 . 3) :color "dim gray" :style flat-button) :weight extra-bold :height 143))))
 '(warning ((t (:foreground "light sea green" :weight bold)))))

;; Remove default scratch buffer message
(setq initial-scratch-message nil)

;; Enable icomplete-mode for minibuffer autocomplete
(icomplete-mode 1)
